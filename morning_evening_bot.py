# morning_evening_bot.py

from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
import asyncio
import json
import pytz
import os
from datetime import datetime
from apscheduler.schedulers.asyncio import AsyncIOScheduler

API_TOKEN = os.getenv('API_TOKEN')  # Bot token from BotFather

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
scheduler = AsyncIOScheduler()
scheduler.start()

user_data_file = 'users.json'

class Form(StatesGroup):
    character = State()
    age = State()
    nicknames = State()
    timezone = State()
    style = State()
    schedule = State()

CHARACTERS = ["–ú–∞–º–∞", "–ü–∞–ø–∞", "–õ—é–±–∏–º–∞—è –∂–µ–Ω—â–∏–Ω–∞", "–õ—é–±–∏–º—ã–π –º—É–∂—á–∏–Ω–∞", "–ü–æ–¥—Ä—É–≥–∞", "–î—Ä—É–≥", "–ë–∞–±—É—à–∫–∞", "–î–µ–¥—É—à–∫–∞"]
STYLES = ["–ó–∞–±–æ—Ç–ª–∏–≤—ã–π", "–†–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π", "–î—Ä—É–∂–µ—Å–∫–∏–π / –≤–µ—Å—ë–ª—ã–π", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π"]
TIMES = ["–¢–æ–ª—å–∫–æ —É—Ç—Ä–æ–º", "–¢–æ–ª—å–∫–æ –≤–µ—á–µ—Ä–æ–º", "–ò —É—Ç—Ä–æ–º, –∏ –≤–µ—á–µ—Ä–æ–º"]

def load_users():
    try:
        with open(user_data_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_users(data):
    with open(user_data_file, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üíå –î–∞–≤–∞–π –Ω–∞—á–Ω—ë–º. –û—Ç –∫–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è? (–í—ã–±–µ—Ä–∏ –æ–¥–Ω–æ–≥–æ)")
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for ch in CHARACTERS:
        kb.add(KeyboardButton(ch))
    await Form.character.set()
    await message.answer("–í—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=kb)

@dp.message_handler(commands='start')
async def start_bot(message: types.Message):
    await cmd_start(message)

@dp.message_handler(state=Form.character)
async def set_character(message: types.Message, state: FSMContext):
    if message.text not in CHARACTERS:
        return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")
    await state.update_data(character=message.text)
    await Form.next()
    await message.answer("–°–∫–æ–ª—å–∫–æ –ª–µ—Ç —ç—Ç–æ–º—É —á–µ–ª–æ–≤–µ–∫—É?")

@dp.message_handler(state=Form.age)
async def set_age(message: types.Message, state: FSMContext):
    await state.update_data(age=message.text)
    await Form.next()
    await message.answer("–ö–∞–∫ –æ–Ω(–∞) —Ç–µ–±—è –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞–µ—Ç? (–ú–æ–∂–Ω–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)")

@dp.message_handler(state=Form.nicknames)
async def set_nicknames(message: types.Message, state: FSMContext):
    nicks = [n.strip() for n in message.text.split(',') if n.strip()]
    await state.update_data(nicknames=nicks)
    await Form.next()
    await message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã –∂–∏–≤—ë—à—å (–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞)?")

@dp.message_handler(state=Form.timezone)
async def set_timezone(message: types.Message, state: FSMContext):
    await state.update_data(timezone=message.text)
    await Form.next()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for s in STYLES:
        kb.add(KeyboardButton(s))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π:", reply_markup=kb)

@dp.message_handler(state=Form.style)
async def set_style(message: types.Message, state: FSMContext):
    if message.text not in STYLES:
        return await message.reply("–í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö")
    await state.update_data(style=message.text)
    await Form.next()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for t in TIMES:
        kb.add(KeyboardButton(t))
    await message.answer("–ö–æ–≥–¥–∞ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è?", reply_markup=kb)

@dp.message_handler(state=Form.schedule)
async def set_schedule(message: types.Message, state: FSMContext):
    if message.text not in TIMES:
        return await message.reply("–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    data = await state.get_data()
    user_id = str(message.from_user.id)
    users = load_users()
    data['schedule'] = message.text
    users[user_id] = data
    save_users(users)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í—Å—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ üíå –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ")
    await state.finish()

def generate_message(info, evening=False):
    nick = info['nicknames'][0] if info['nicknames'] else '–¥–æ—Ä–æ–≥–æ–π'
    character = info['character']
    if evening:
        # Evening variants
        return {
            '–ú–∞–º–∞': f"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, {nick}! –ú–∞–º–æ—á–∫–∞ —Ä—è–¥–æ–º –≤ –º—ã—Å–ª—è—Ö.",
            '–ü–∞–ø–∞': f"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, {nick}. –ü–∞–ø–∞ —É–≤–µ—Ä–µ–Ω ‚Äì –≤—Å—ë –±—É–¥–µ—Ç —Ö–æ—Ä–æ—à–æ.",
            '–õ—é–±–∏–º—ã–π –º—É–∂—á–∏–Ω–∞': f"–°–ø–∏ —Å–ª–∞–¥–∫–æ, {nick} üòò –Ø —Ä—è–¥–æ–º.",
            '–õ—é–±–∏–º–∞—è –∂–µ–Ω—â–∏–Ω–∞': f"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –º–æ—è –Ω–µ–∂–Ω–∞—è {nick}.",
            '–ü–æ–¥—Ä—É–≥–∞': f"–°–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤, {nick}! –ó–∞–≤—Ç—Ä–∞ –ø—Ä–æ–¥–æ–ª–∂–∏–º –≤–µ—Å–µ–ª—å–µ.",
            '–î—Ä—É–≥': f"–î–æ–±—Ä—ã—Ö —Å–Ω–æ–≤, {nick}. –ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –≤ –±–æ–π.",
            '–ë–∞–±—É—à–∫–∞': f"–°–ø–∏ —Å–ø–æ–∫–æ–π–Ω–æ, –≤–Ω—É–∫. –ë–∞–±—É–ª—è –ª—é–±–∏—Ç.",
            '–î–µ–¥—É—à–∫–∞': f"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –≤–Ω—É—á–µ–∫. –î–µ–¥—É—à–∫–∞ —Ä—è–¥–æ–º."
        }.get(character, f"–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, {nick}!")

    return {
        '–ú–∞–º–∞': f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {nick}! –ú–∞–º–æ—á–∫–∞ –∂–µ–ª–∞–µ—Ç —Ç–µ–±–µ —á—É–¥–µ—Å–Ω–æ–≥–æ –¥–Ω—è.",
        '–ü–∞–ø–∞': f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {nick}. –ü–∞–ø–∞ –≥–æ—Ä–¥–∏—Ç—Å—è —Ç–æ–±–æ–π!",
        '–õ—é–±–∏–º—ã–π –º—É–∂—á–∏–Ω–∞': f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {nick} üòò –Ø —Å–∫—É—á–∞—é.",
        '–õ—é–±–∏–º–∞—è –∂–µ–Ω—â–∏–Ω–∞': f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –º–æ—è {nick}! –¢—ã –ª—É—á—à–∞—è.",
        '–ü–æ–¥—Ä—É–≥–∞': f"–ü—Ä–∏–≤–µ—Ç, {nick}! –î–∞–≤–∞–π –∑–∞–∂–∂—ë–º —ç—Ç–æ—Ç –¥–µ–Ω—å.",
        '–î—Ä—É–≥': f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {nick}! –í–ø–µ—Ä—ë–¥ –∫ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è–º.",
        '–ë–∞–±—É—à–∫–∞': f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {nick}. –ë–∞–±—É–ª—è –æ–±–Ω–∏–º–∞–µ—Ç.",
        '–î–µ–¥—É—à–∫–∞': f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {nick}. –î–µ–¥—É—à–∫–∞ –∂–µ–ª–∞–µ—Ç —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è."
    }.get(character, f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, {nick}!")

async def send_daily_messages():
    users = load_users()
    for user_id, info in users.items():
        tz = info.get('timezone', 'Europe/Moscow')
        try:
            now = datetime.now(pytz.timezone(tz))
        except:
            now = datetime.now()
        hour = now.hour
        # Morning at 08:00, Evening at 20:00
        if info['schedule'] in ["–¢–æ–ª—å–∫–æ —É—Ç—Ä–æ–º", "–ò —É—Ç—Ä–æ–º, –∏ –≤–µ—á–µ—Ä–æ–º"] and hour == 8:
            await bot.send_message(user_id, generate_message(info, evening=False))
        if info['schedule'] in ["–¢–æ–ª—å–∫–æ –≤–µ—á–µ—Ä–æ–º", "–ò —É—Ç—Ä–æ–º, –∏ –≤–µ—á–µ—Ä–æ–º"] and hour == 20:
            await bot.send_message(user_id, generate_message(info, evening=True))

scheduler.add_job(send_daily_messages, 'cron', minute=0)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
